name: Compiler workflow for ubuntu
on:
  workflow_dispatch:
    inputs:
      redisv:
        description: 'redis version'
        default: '8.0.2'
        required: false
        type: string
      osv:
        description: 'ubuntu version'
        default: '22.04'
        required: false
        type: string
      pgsz-amd64:
        description: 'jemalloc page'
        default: '12'
        required: false
        type: string
      pgsz-arm64:
        description: 'jemalloc page'
        default: '12'
        required: false
        type: string

jobs:
  compile:
    strategy:
      matrix:
        platform: ["amd64", "arm64"]
        # platform: ["amd64"]
    runs-on: ubuntu-latest
    steps:
    - name: Setup jemalloc compile option
      id: jemalloc
      run: |
        if [ ${{ matrix.platform }} = "amd64" ]; then
          echo "PGSZ=${{ inputs.pgsz-amd64 }}" >> $GITHUB_OUTPUT
        else
          echo "PGSZ=${{ inputs.pgsz-arm64 }}" >> $GITHUB_OUTPUT
        fi
    - name: Setup redis main version
      id: redismain
      run: |
        echo "RM=$(echo ${{ inputs.redisv }} | cut -d'.' -f1)" >> $GITHUB_OUTPUT
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Prepare redis src
      run: |
        wget https://download.redis.io/releases/redis-${{ inputs.redisv }}.tar.gz
        tar -xzf redis-${{ inputs.redisv }}.tar.gz
        ls -lh redis-${{ inputs.redisv }}
      working-directory: /tmp
    - name: compile redis
      run: |
        if [ ${{ steps.redismain.outputs.RM }} -lt 8 ]; then
          docker run --platform linux/${{ matrix.platform }} --rm -v /tmp/redis-${{ inputs.redisv }}:/workspace -w /workspace djangoyi/redis-compiler:ubuntu-${{ inputs.osv }} bash -c "JEMALLOC_CONFIGURE_OPTS='--with-lg-page=${{ steps.jemalloc.outputs.PGSZ }}' make BUILD_TLS=yes USE_SYSTEMD=yes && && PREFIX=/tmp/redis-output make install"
        else
          docker run --platform linux/${{ matrix.platform }} --rm -v /tmp/redis-${{ inputs.redisv }}:/workspace -w /workspace djangoyi/redis-compiler:ubuntu-${{ inputs.osv }} bash -c "export BUILD_TLS=yes;export BUILD_WITH_MODULES=yes;export INSTALL_RUST_TOOLCHAIN=yes;export DISABLE_WERRORS=yes;JEMALLOC_CONFIGURE_OPTS='--with-lg-page=${{ steps.jemalloc.outputs.PGSZ }}' make -j "$(nproc)" all && PREFIX=/tmp/redis-output make install"
        fi
    - name: strip and pack bin files
      run: |
        find ./ -type f -exec strip "{}" \;
        tar -czf /tmp/redis-${{ inputs.redisv }}-${{ matrix.platform }}.tgz ./*
      working-directory: /tmp/redis-output
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-${{ matrix.platform }}
        path: /tmp/redis-${{ inputs.redisv }}-${{ matrix.platform }}.tgz

  release:
    runs-on: ubuntu-latest
    needs: compile
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    # - name: Remove release
    #   uses: liudonghua123/delete-release-action@v1
    #   with:
    #     release_name: redis-${{ inputs.redisv }}_ubuntu-${{ inputs.osv }}
    #     suppress_errors: true
    # - name: Remove tag
    #   run: |
    #     git tag -d mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }} || :
    #     git push origin --delete mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }} || :
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ubuntu-*
        path: release
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/ubuntu-*/*
        tag_name: redis-${{ inputs.redisv }}_ubuntu-${{ inputs.osv }}
